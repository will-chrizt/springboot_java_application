
@Library('my-shared-library') _

pipeline{

    agent any
    
    
    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '435951944183')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-west-2')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'willchrist')
    }
        

            
        stages{

            stage('Git Checkout'){
                when{expression { params.action == 'create' }}
                   
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/will-chrizt/springboot_java_application.git"
            )
            }
            }
            stage('unit test maven'){
                when{expression { params.action == 'create' }}
                steps{
                   script{
                       mvnTest()
               }       
            }
            }
            stage('mvn integration test'){
                when{expression { params.action == 'create' }}
                steps{
                    script{
                        mvnIntegrationTest()
                    }
                }
            }

            stage('static code analysis: sonarqube'){
                when{expression { params.action == 'create' }}
                steps{
                    script{
                        def ZSonarQubecredentialId = 'server2'
                        statiCodeAnalysis(ZSonarQubecredentialId)

                    }
                }
            }

            stage('Quality Gate  Status Check : sonarqube'){
                when{expression { params.action == 'create' }}
                steps{
                    script{
                        def ZSonarQubecredentialId = 'server2'
                        statiCodeAnalysis(ZSonarQubecredentialId)

                    }
                }
            }

            stage('Maven Build : maven'){
                when{expression { params.action == 'create' }}
                steps{
                    script{
                       mvnBuild()

                    }
                }
            }

             stage('Docker Image Build : ECR'){
          when { expression {  params.action == 'create' } }
           steps{
              script{
                   
                  dockerBuildECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
           }
       }
     stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
             steps{
              script{
                   
                  dockerImageScanECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }
           }
       }
       stage('Docker Image Push : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
            
                dockerImagePushECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }
            }
        }   
        stage('Docker Image Cleanup : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{

                   dockerImageCleanupECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
     } 

        }} 